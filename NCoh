# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import numpy as np
import array
import random
def harmony(v,w):           # computes harmony of a given instance
    h = 0.0
    for x in range(0,v.size):
        for y in range(0,v.size):
            h += w[x][y] * v[x] * v[y]
    print(h)
    return h
s = 3 
d = 0.05
max = 1
min = -1
v = np.array([0.1,0.1,0.1,0.1,1]);
w = np.arange(5.0*5.0).reshape(5,5)

for x in range(0,v.size):
    for y in range(0,v.size):   
        b = random.choice([0.4, -0.6])
        w[x][y] = b     #random assignment of positive or negative constraint
        if(x == s or y == s):
            w[x][y] = 0.5   #weights of special node
            
np.fill_diagonal(w, 0)  #selfdirected weights are 0 
h1 = 0.0
print(w)
for c in range(200): #200 cycles
    print(c)
    for x in range(0,v.size):
        y = np.dot(w[x:x+1],v) #net(v) value from slides
        if (y>0): 
            v[x] = v[x]*(1-d) + (y*(max - v[x])) #update rule from slides
            if(v[x] > 1):
               v[x] = 1
            if(v[x] < -1):
               v[x] = -1
        else:
            v[x] = v[x]*(1-d) + (y*(v[x] - min)) #update rule from slides
            if(v[x] > 1):
                v[x] = 1
            if(v[x] < -1):
                v[x] = -1
        v[s] = 1
    h2 = harmony(v,w)
    if((h2 - h1) > 0.001):
        h1 = h2
    else:
        print(h1)
        print(h2)
        break
print(w)
print(v)


    


